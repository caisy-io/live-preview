"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BROADCASTCHANNEL_MESSAGE_TYPE_PEER_PING = exports.BROADCASTCHANNEL_MESSAGE_TYPE_PEER_MESSAGE = exports.BROADCASTCHANNEL_MESSAGE_TYPE_INIT = exports.OUTGOING_SOCKET_MESSAGE_TYPE = exports.INCOMING_SOCKET_MESSAGE_TYPE = exports.PUBSUB_KEY_ACTIVE_URL_CHANGE = exports.PUBSUB_KEY_DOCUMENT_ACTIVE_CHANGE = exports.PUBSUB_KEY_CONNECTION = exports.PUBSUB_KEY_PREVIEW_FIELD_UPDATE = exports.PEER_MESSAGE_TYPE_PREVIEW_FIELD_ACTIVE = exports.PEER_MESSAGE_TYPE_PREVIEW_FIELD_UPDATE = exports.PEER_MESSAGE_TYPE_HOT_FIELD_UPDATE = exports.PEER_MESSAGE_TYPE_PEER_MUTATION = exports.PEER_MESSAGE_TYPE_ACTIVE_URL = exports.PEER_MESSAGE_TYPE_FIELD_INACTIVE_ON = exports.PEER_MESSAGE_TYPE_FIELD_ACTIVE_ON = exports.PEER_MESSAGE_TYPE_ACTIVE_DOCUMENT_CHANGE = exports.PEER_MESSAGE_TYPE_MESSAGE_SYNC_ACKNOWLEDGEMENT = exports.PEER_MESSAGE_TYPE_MESSAGE_SYNC_REQUEST = exports.PEER_MESSAGE_TYPE_FIELD_UNSUBSCRIBE_ON = exports.PEER_MESSAGE_TYPE_FIELD_SUBSCRIBE_ON = exports.PEER_MESSAGE_TYPE_FIELD_DISSMISS = exports.PEER_MESSAGE_TYPE_AWARENESS = exports.PEER_MESSAGE_TYPE_MESSAGE_SYNC_UPDATE = void 0;
exports.PEER_MESSAGE_TYPE_MESSAGE_SYNC_UPDATE = 1;
exports.PEER_MESSAGE_TYPE_AWARENESS = 2;
exports.PEER_MESSAGE_TYPE_FIELD_DISSMISS = 3; // peer knows that other peer is not intrested in this field
exports.PEER_MESSAGE_TYPE_FIELD_SUBSCRIBE_ON = 4; // Declare that peer is intrested in this field
exports.PEER_MESSAGE_TYPE_FIELD_UNSUBSCRIBE_ON = 5; // Declare that peer is not intrested anymore in this field
exports.PEER_MESSAGE_TYPE_MESSAGE_SYNC_REQUEST = 6;
exports.PEER_MESSAGE_TYPE_MESSAGE_SYNC_ACKNOWLEDGEMENT = 7;
exports.PEER_MESSAGE_TYPE_ACTIVE_DOCUMENT_CHANGE = 8; // User changed the active document(s)
exports.PEER_MESSAGE_TYPE_FIELD_ACTIVE_ON = 9; // Field peer is active on
exports.PEER_MESSAGE_TYPE_FIELD_INACTIVE_ON = 10; // Field peer is not active anymore
exports.PEER_MESSAGE_TYPE_ACTIVE_URL = 11; // perr is on this Active URL right now
exports.PEER_MESSAGE_TYPE_PEER_MUTATION = 12; // when ever there are changes in the store, like update document we share it with other peers (not all events implemented yet)
exports.PEER_MESSAGE_TYPE_HOT_FIELD_UPDATE = 13; // since the value of fields can change very often we send this on a seperate channel
exports.PEER_MESSAGE_TYPE_PREVIEW_FIELD_UPDATE = 14;
exports.PEER_MESSAGE_TYPE_PREVIEW_FIELD_ACTIVE = 15;
// pubsub only used internally not peer2peer or webhocket
exports.PUBSUB_KEY_PREVIEW_FIELD_UPDATE = "pfu";
exports.PUBSUB_KEY_CONNECTION = "conn";
exports.PUBSUB_KEY_DOCUMENT_ACTIVE_CHANGE = "dac";
exports.PUBSUB_KEY_ACTIVE_URL_CHANGE = "auc";
// used for websocket
var INCOMING_SOCKET_MESSAGE_TYPE;
(function (INCOMING_SOCKET_MESSAGE_TYPE) {
    INCOMING_SOCKET_MESSAGE_TYPE["SIGNAL"] = "signal";
    INCOMING_SOCKET_MESSAGE_TYPE["CHANGE"] = "change";
    INCOMING_SOCKET_MESSAGE_TYPE["ASSIGNMENT"] = "assignment";
    INCOMING_SOCKET_MESSAGE_TYPE["PEER_MESSAGE"] = "peer";
})(INCOMING_SOCKET_MESSAGE_TYPE || (exports.INCOMING_SOCKET_MESSAGE_TYPE = INCOMING_SOCKET_MESSAGE_TYPE = {}));
var OUTGOING_SOCKET_MESSAGE_TYPE;
(function (OUTGOING_SOCKET_MESSAGE_TYPE) {
    OUTGOING_SOCKET_MESSAGE_TYPE["SWITCH"] = "switch";
    OUTGOING_SOCKET_MESSAGE_TYPE["SIGNAL"] = "signal";
    OUTGOING_SOCKET_MESSAGE_TYPE["PEER_MESSAGE"] = "peer";
})(OUTGOING_SOCKET_MESSAGE_TYPE || (exports.OUTGOING_SOCKET_MESSAGE_TYPE = OUTGOING_SOCKET_MESSAGE_TYPE = {}));
// broadcast message types
exports.BROADCASTCHANNEL_MESSAGE_TYPE_INIT = 41;
exports.BROADCASTCHANNEL_MESSAGE_TYPE_PEER_MESSAGE = 42;
exports.BROADCASTCHANNEL_MESSAGE_TYPE_PEER_PING = 43;
